#!/bin/bash
# Script de test pour SIOP Spring Boot Application

echo "=== Test SIOP Spring Boot Application ==="
echo ""

# Configuration
BASE_URL="http://localhost:8080"
API_BASE="$BASE_URL/api/siop"

# Fonction de test
test_endpoint() {
    local endpoint="$1"
    local expected_status="$2"
    local description="$3"
    
    echo "üß™ Test: $description"
    echo "   Endpoint: $endpoint"
    
    response=$(curl -s -w "%{http_code}" -o /dev/null "$endpoint")
    
    if [[ "$response" == "$expected_status" ]]; then
        echo "   ‚úÖ Succ√®s (HTTP $response)"
    else
        echo "   ‚ùå √âchec (HTTP $response, attendu $expected_status)"
        return 1
    fi
    echo ""
}

# V√©rification que l'application est d√©marr√©e
echo "1. V√©rification du d√©marrage de l'application..."

if curl -s "$BASE_URL/actuator/health" > /dev/null 2>&1; then
    echo "‚úÖ Application d√©marr√©e"
else
    echo "‚ùå Application non accessible"
    echo "   D√©marrez l'application avec: ./deploy.sh"
    exit 1
fi
echo ""

# Tests des endpoints
echo "2. Tests des endpoints API..."

# Test de sant√©
test_endpoint "$API_BASE/health" "200" "V√©rification de l'√©tat"

# Test de statut
test_endpoint "$API_BASE/status" "200" "Statut de l'application"

# Test de connexion (peut √©chouer si Oracle n'est pas configur√©)
echo "üß™ Test: Test de connexion Oracle"
echo "   Endpoint: $API_BASE/test-connection"
response=$(curl -s "$API_BASE/test-connection")
if echo "$response" | grep -q "success.*true"; then
    echo "   ‚úÖ Connexion Oracle r√©ussie"
else
    echo "   ‚ö†Ô∏è  Connexion Oracle √©chou√©e (configuration requise)"
fi
echo ""

# Test de g√©n√©ration (peut √©chouer si Oracle n'est pas configur√©)
echo "üß™ Test: G√©n√©ration manuelle du rapport"
echo "   Endpoint: POST $API_BASE/generate"
response=$(curl -s -X POST "$API_BASE/generate")
if echo "$response" | grep -q "success.*true"; then
    echo "   ‚úÖ G√©n√©ration r√©ussie"
else
    echo "   ‚ö†Ô∏è  G√©n√©ration √©chou√©e (configuration Oracle requise)"
fi
echo ""

# Tests des endpoints Actuator
echo "3. Tests des endpoints Actuator..."

test_endpoint "$BASE_URL/actuator/health" "200" "Health Check Actuator"
test_endpoint "$BASE_URL/actuator/info" "200" "Info Actuator"
test_endpoint "$BASE_URL/actuator/metrics" "200" "M√©triques Actuator"

# Test de performance
echo "4. Test de performance..."

echo "üß™ Test: Temps de r√©ponse"
start_time=$(date +%s%N)
curl -s "$API_BASE/health" > /dev/null
end_time=$(date +%s%N)
response_time=$(( (end_time - start_time) / 1000000 ))

if [[ $response_time -lt 1000 ]]; then
    echo "   ‚úÖ Temps de r√©ponse: ${response_time}ms (excellent)"
elif [[ $response_time -lt 3000 ]]; then
    echo "   ‚úÖ Temps de r√©ponse: ${response_time}ms (bon)"
else
    echo "   ‚ö†Ô∏è  Temps de r√©ponse: ${response_time}ms (lent)"
fi
echo ""

# V√©rification des logs
echo "5. V√©rification des logs..."

if [[ -f "logs/siop-application.log" ]]; then
    echo "‚úÖ Fichier de logs trouv√©: logs/siop-application.log"
    
    # V√©rification des erreurs
    error_count=$(grep -c "ERROR" logs/siop-application.log 2>/dev/null || echo "0")
    if [[ $error_count -eq 0 ]]; then
        echo "‚úÖ Aucune erreur dans les logs"
    else
        echo "‚ö†Ô∏è  $error_count erreur(s) trouv√©e(s) dans les logs"
        echo "   Derni√®res erreurs:"
        grep "ERROR" logs/siop-application.log | tail -3
    fi
else
    echo "‚ö†Ô∏è  Fichier de logs non trouv√©"
fi
echo ""

# R√©sum√© des tests
echo "=== R√âSUM√â DES TESTS ==="
echo ""

# Comptage des tests r√©ussis
total_tests=0
passed_tests=0

# Tests des endpoints
for endpoint in "health" "status"; do
    total_tests=$((total_tests + 1))
    if curl -s "$API_BASE/$endpoint" > /dev/null 2>&1; then
        passed_tests=$((passed_tests + 1))
    fi
done

# Tests Actuator
for endpoint in "actuator/health" "actuator/info" "actuator/metrics"; do
    total_tests=$((total_tests + 1))
    if curl -s "$BASE_URL/$endpoint" > /dev/null 2>&1; then
        passed_tests=$((passed_tests + 1))
    fi
done

echo "üìä R√©sultats:"
echo "   ‚Ä¢ Tests r√©ussis: $passed_tests/$total_tests"
echo "   ‚Ä¢ Taux de r√©ussite: $(( passed_tests * 100 / total_tests ))%"
echo ""

if [[ $passed_tests -eq $total_tests ]]; then
    echo "‚úÖ Tous les tests sont pass√©s!"
    echo "   L'application SIOP Spring Boot fonctionne correctement"
else
    echo "‚ö†Ô∏è  Certains tests ont √©chou√©"
    echo "   V√©rifiez la configuration et les logs"
fi

echo ""
echo "üîß COMMANDES UTILES:"
echo "   ‚Ä¢ Voir les logs: tail -f logs/siop-application.log"
echo "   ‚Ä¢ Red√©marrer: ./deploy.sh"
echo "   ‚Ä¢ Arr√™ter: pkill -f siop-spring-boot"
echo "   ‚Ä¢ Test manuel: curl $API_BASE/health"
echo ""
echo "‚úÖ Tests termin√©s!"
